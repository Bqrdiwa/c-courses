*Source code in src/courses/algorithm_header.cpp
In this lesson, we will explore the **`algorithm`** header in C++, which provides a collection of functions to perform common algorithmic operations such as sorting, searching, and modifying collections of data.

{
#The `algorithm` Header in C++:
##1. Introduction to `algorithm`
##2. Sorting Algorithms
##3. Searching Algorithms
##4. Modifying Algorithms
##5. Numerical Algorithms
##6. Algorithms for Iterators
}
{
#Let's dive into the world of algorithms in C++! 🚀
}
{{
#Introduction to `algorithm` Header
{
##What is `algorithm`?
###The `algorithm` header in C++ provides a rich set of functions to operate on containers like arrays, vectors, lists, and other sequences. These functions include sorting, searching, modifying elements, and performing various numerical operations.
###By including the `algorithm` header, you can access a wide range of pre-defined algorithms that simplify common tasks, allowing you to focus on the logic of your program.
}
{
#Example of Including `algorithm` Header:
^^^
#include <iostream>
#include <vector>
#include <algorithm>  // Include the algorithm header
using namespace std;

int main() {
    vector<int> numbers = {5, 2, 9, 1, 5, 6};
    
    // Sorting the vector
    sort(numbers.begin(), numbers.end());
    
    // Print sorted vector
    for (int num : numbers) {
        cout << num << " ";
    }
    cout << endl;
    
    return 0;
}
^^^
###Here, we use the `sort()` function from the `algorithm` header to sort a vector of integers in ascending order.
}
}
{
#Now, let's explore **Sorting Algorithms** in the `algorithm` header! 📊
}
{{
#Sorting Algorithms
{
##Common Sorting Functions
###The `algorithm` header provides several sorting algorithms. The most commonly used one is `sort()`, which sorts elements in ascending order.
###There are other sorting functions like `stable_sort()`, which preserves the relative order of equal elements, and `partial_sort()`, which sorts a portion of the sequence.

###1. **sort()**: Sorts the entire range of elements in ascending order.
###2. **stable_sort()**: Similar to `sort()`, but preserves the relative order of equal elements.
###3. **partial_sort()**: Sorts only part of the sequence, useful when you need to sort a subset of the elements.
}
{
#Example of Sorting with `sort()`:
^^^
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<int> numbers = {5, 2, 9, 1, 5, 6};
    
    // Sorting the entire vector
    sort(numbers.begin(), numbers.end());  // Sort in ascending order
    
    // Print sorted vector
    for (int num : numbers) {
        cout << num << " ";
    }
    cout << endl;
    
    return 0;
}
^^^
###In this example, the `sort()` function is used to sort a vector of integers in ascending order.
}
}
{
#Let's move on to **Searching Algorithms** 🧐
}
{{
#Searching Algorithms
{
##Common Searching Functions
###The `algorithm` header provides several functions for searching elements in a container. The two most common searching functions are `find()` and `binary_search()`:
###1. **find()**: Searches for a value in a range. It returns an iterator pointing to the first occurrence of the element.
###2. **binary_search()**: Checks if a value exists in a sorted range using binary search. It returns a boolean indicating if the value is present.

####Note: For `binary_search()` to work correctly, the container must be sorted beforehand.
}
{
#Example of Searching with `find()`:
^^^
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<int> numbers = {5, 2, 9, 1, 5, 6};
    
    // Search for a value using find()
    auto it = find(numbers.begin(), numbers.end(), 9);
    
    if (it != numbers.end()) {
        cout << "Found " << *it << " at position " << distance(numbers.begin(), it) << endl;
    } else {
        cout << "Element not found!" << endl;
    }
    
    return 0;
}
^^^
###In this example, the `find()` function is used to search for the value `9` in the vector. If found, the iterator `it` will point to that value.
}
}
{
#Next, let's look at **Modifying Algorithms** 🔧
}
{{
#Modifying Algorithms
{
##Common Modifying Functions
###The `algorithm` header also provides functions to modify elements in a container. Some commonly used modifying algorithms are:
###1. **fill()**: Assigns a specified value to all elements in the range.
###2. **reverse()**: Reverses the order of elements in a range.
###3. **replace()**: Replaces all occurrences of a value with another value in a range.
###4. **remove()**: Removes all occurrences of a value from the range and shifts remaining elements.

####Note: Some of these functions do not actually "erase" elements but shift the remaining elements in place.
}
{
#Example of Modifying with `reverse()`:
^^^
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Reverse the vector
    reverse(numbers.begin(), numbers.end());
    
    // Print reversed vector
    for (int num : numbers) {
        cout << num << " ";
    }
    cout << endl;
    
    return 0;
}
^^^
###In this example, the `reverse()` function is used to reverse the order of elements in a vector.
}
}
{
#Now, let's check out **Numerical Algorithms** 🔢
}
{{
#Numerical Algorithms
{
##Common Numerical Functions
###The `algorithm` header also includes some useful numerical algorithms:
###1. **accumulate()**: Calculates the sum of elements in a range.
###2. **partial_sum()**: Computes the partial sum of elements in a range.
###3. **inner_product()**: Computes the inner product (dot product) of two sequences.
###4. **adjacent_difference()**: Computes the difference between consecutive elements.

These functions are handy for performing quick numerical computations on a sequence of data.
}
{
#Example of Numerical Computation with `accumulate()`:
^^^
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of elements using accumulate
    int sum = accumulate(numbers.begin(), numbers.end(), 0);
    
    cout << "Sum of elements: " << sum << endl;
    
    return 0;
}
^^^
###In this example, `accumulate()` is used to calculate the sum of elements in a vector.
}
}
{
#Finally, let's explore algorithms for **Iterators** 🧩
}
{{
#Algorithms for Iterators
{
##Iterators and Algorithms
###The `algorithm` header is designed to work seamlessly with iterators. Many algorithms, such as `sort()`, `find()`, and `reverse()`, require iterators to specify the range of elements to operate on.
###Iterators allow you to traverse the container without exposing its internal structure. They provide a more flexible and efficient way to access elements compared to traditional array indices.
}
{
#Example of Using Iterators:
^^^
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<int> numbers = {10, 20, 30, 40, 50};
    
    // Use iterator to reverse the vector
    reverse(numbers.begin(), numbers.end());
    
    // Print reversed vector using iterator
    for (auto it = numbers.begin(); it != numbers.end(); ++it) {
        cout << *it << " ";
    }
    cout << endl;
    
    return 0;
}
^^^
###Here, we use iterators to reverse and print the elements of a vector.
}
}
