*Source code in src/courses/mathematical_functions.cpp
In this lesson, we will cover 7 commonly used mathematical functions in C++ that can help you perform various mathematical operations.

{
#Mathematical Functions in C++:
##1. abs()
##2. pow()
##3. sqrt()
##4. ceil()
##5. floor()
##6. round()
##7. fmod()
}
{
#Let’s explore some powerful mathematical functions in C++! 🌟
}
{{
#1. **abs()** - Absolute Value Function 🔢
{
##Definition and Usage:
###The `abs()` function returns the absolute value of a number. It removes any negative sign and returns a non-negative value.
###This function works with both integers and floating-point numbers.

####Syntax:
^^^
int abs(int x);
double abs(double x);
^^^
}
{
#Example of `abs()`:
^^^
#include <iostream>
#include <cmath>  // For abs()
using namespace std;

int main() {
    int x = -5;
    cout << "Absolute value of " << x << " is: " << abs(x) << endl;  // Output: 5
    return 0;
}
^^^
###In this example, the `abs()` function is used to return the absolute value of `-5`, which is `5`.
}
}
{
#2. **pow()** - Power Function 💪
}
{{
##Definition and Usage:
###The `pow()` function returns the result of raising a base number to the power of an exponent. It takes two arguments: the base and the exponent.

####Syntax:
^^^
double pow(double base, double exponent);
^^^
}
{
#Example of `pow()`:
^^^
#include <iostream>
#include <cmath>  // For pow()
using namespace std;

int main() {
    double result = pow(2, 3);  // 2^3 = 8
    cout << "2 raised to the power of 3 is: " << result << endl;  // Output: 8
    return 0;
}
^^^
###In this example, `pow(2, 3)` calculates `2^3`, which equals `8`.
}
}
{
#3. **sqrt()** - Square Root Function ➗
}
{{
##Definition and Usage:
###The `sqrt()` function returns the square root of a number. It is used to calculate the principal (non-negative) square root.

####Syntax:
^^^
double sqrt(double x);
^^^
}
{
#Example of `sqrt()`:
^^^
#include <iostream>
#include <cmath>  // For sqrt()
using namespace std;

int main() {
    double result = sqrt(16);  // sqrt(16) = 4
    cout << "Square root of 16 is: " << result << endl;  // Output: 4
    return 0;
}
^^^
###In this example, `sqrt(16)` calculates the square root of `16`, which is `4`.
}
}
{
#4. **ceil()** - Ceiling Function ⬆️
}
{{
##Definition and Usage:
###The `ceil()` function returns the smallest integer greater than or equal to the given number. It rounds up any fractional part.

####Syntax:
^^^
double ceil(double x);
^^^
}
{
#Example of `ceil()`:
^^^
#include <iostream>
#include <cmath>  // For ceil()
using namespace std;

int main() {
    double result = ceil(3.14);  // Ceil of 3.14 is 4
    cout << "Ceiling value of 3.14 is: " << result << endl;  // Output: 4
    return 0;
}
^^^
###In this example, `ceil(3.14)` rounds `3.14` up to the nearest integer `4`.
}
}
{
#5. **floor()** - Floor Function ⬇️
}
{{
##Definition and Usage:
###The `floor()` function returns the largest integer less than or equal to the given number. It rounds down any fractional part.

####Syntax:
^^^
double floor(double x);
^^^
}
{
#Example of `floor()`:
^^^
#include <iostream>
#include <cmath>  // For floor()
using namespace std;

int main() {
    double result = floor(3.14);  // Floor of 3.14 is 3
    cout << "Floor value of 3.14 is: " << result << endl;  // Output: 3
    return 0;
}
^^^
###In this example, `floor(3.14)` rounds `3.14` down to the nearest integer `3`.
}
}
{
#6. **round()** - Rounding Function 🎯
}
{{
##Definition and Usage:
###The `round()` function returns the nearest integer value, rounding halfway cases away from zero.

####Syntax:
^^^
double round(double x);
^^^
}
{
#Example of `round()`:
^^^
#include <iostream>
#include <cmath>  // For round()
using namespace std;

int main() {
    double result = round(3.5);  // Round 3.5 to 4
    cout << "Round value of 3.5 is: " << result << endl;  // Output: 4
    return 0;
}
^^^
###In this example, `round(3.5)` rounds `3.5` to the nearest integer `4`.
}
}
{
#7. **fmod()** - Remainder Function 🔄
}
{{
##Definition and Usage:
###The `fmod()` function returns the remainder of the division of two floating-point numbers. It calculates the remainder after division of the first argument by the second.

####Syntax:
^^^
double fmod(double x, double y);
^^^
}
{
#Example of `fmod()`:
^^^
#include <iostream>
#include <cmath>  // For fmod()
using namespace std;

int main() {
    double result = fmod(5.3, 2);  // Remainder of 5.3 / 2
    cout << "Remainder of 5.3 divided by 2 is: " << result << endl;  // Output: 1.3
    return 0;
}
^^^
###In this example, `fmod(5.3, 2)` calculates the remainder of `5.3` divided by `2`, which is `1.3`.
}
}}

