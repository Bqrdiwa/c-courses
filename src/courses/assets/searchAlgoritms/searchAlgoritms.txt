*Source code in src/courses/searchAlgorithms.cpp
In this lesson, we will explore two common search algorithms: Binary Search and Linear Search.

{
#Search Algorithms in C++:
##1. Binary Search
##2. Linear Search
}
{
#Let's start with Binary Search! üîç
}
{{
#Binary Search
{
##Definition and Usage
###Binary Search is an efficient algorithm for finding an element in a **sorted** array. It repeatedly divides the search interval in half.
###If the value of the search key is less than the item in the middle of the interval, the search continues in the lower half, or if it‚Äôs greater, the search continues in the upper half.
}
{
#Example of Binary Search:
^^^
#include <iostream>
#include <vector>
using namespace std;

int binarySearch(const vector<int>& arr, int target) {
    int low = 0, high = arr.size() - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == target) return mid;
        else if (arr[mid] < target) low = mid + 1;
        else high = mid - 1;
    }
    return -1; // target not found
}

int main() {
    vector<int> arr = {1, 3, 5, 7, 9, 11, 13};
    int target = 7;
    cout << "Element found at index: " << binarySearch(arr, target) << endl; 
    return 0;
}
^^^
###In this example, Binary Search is used to find the element `7` in the sorted array. The algorithm efficiently reduces the search space by half with each step.
}
}
{
#Next, let's discuss Linear Search üèÉ‚Äç‚ôÇÔ∏è
}
{{
#Linear Search
{
##Definition and Usage
###Linear Search is a simple algorithm that checks every element of the array one by one until the target element is found or the entire array is traversed.
###It works on both sorted and unsorted arrays, but it is less efficient compared to Binary Search, especially for large datasets.
}
{
#Example of Linear Search:
^^^
#include <iostream>
#include <vector>
using namespace std;

int linearSearch(const vector<int>& arr, int target) {
    for (int i = 0; i < arr.size(); i++) {
        if (arr[i] == target) return i;
    }
    return -1; // target not found
}

int main() {
    vector<int> arr = {4, 2, 9, 7, 5};
    int target = 7;
    cout << "Element found at index: " << linearSearch(arr, target) << endl;
    return 0;
}
^^^
###In this example, Linear Search checks each element in the array to find the target `7`. It‚Äôs straightforward but can be slow for large arrays.
}
}
{
#Comparison: Binary Search vs. Linear Search ü§î
}
{{
#Comparison
{
##Key Differences:
###- **Efficiency**: Binary Search is much faster with time complexity of O(log n) when the array is sorted, while Linear Search has a time complexity of O(n) regardless of sorting.
###- **Use Case**: Binary Search works only on sorted arrays, but Linear Search can be used on both sorted and unsorted arrays.
###- **Simplicity**: Linear Search is simpler and requires no sorting, while Binary Search requires a sorted array and more complex implementation.
}
}
